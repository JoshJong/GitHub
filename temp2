
var a,b;
//undefined
if(a=b){
 console.log('yes');
}
// the final check point is a


/*3-0010*/


<script src="a.js"></script>
<script src="b.js"></script>
//a.js
//var name="John"
//b.js
//var name="Mark"
//name will be Mark
// if <script src="a.js" async></script>  name will be John
// so the suggestion is to not to use Global Variables

var upperCase='ABC';
(function(){
   var upperCase ="DEF";
   
   (function(){   
      var upperCase ="GHI";       // GHI
      console.log(upperCase);
   })();
})();   

var upperCase='ABC';
(function(){
   var upperCase ="DEF";   <- this variable is hard to be accessed
   
   (function(){  
      var upperCase ="GHI";
      console.log(window.upperCase);  //ABC
   })();     
})();


// the variable inside a scope should have_


////////////////////////////////
function myObject(){
 this.x=100;
}
var p = myObject();  //一般function部會去操作this... 這樣只會得到一個全域window的變數x 為100

function MyObject(){
 this.x=100;
}
var p = new MyObject(); //物件習慣以大寫開頭
/*3-0045*/


function getIndex(index){
 return index++, index;   // 只會回傳最後一個
}

//conditional
//condition ? exprIfTrue : exprIfFalse
//  condition
//   值用來做為條件的表達式
//  exprIfTrue
//   如果 condition 的值是 truthy (等於或是可轉換為 true) , exprIfTrue  會被執行
//  exprIfFalse
//   如果 condition 的值是 falsy (等於或是可轉換為 false) , exprIfFalse  會被執行
//    falsy 的表達式有 null, NaN, 0, 空字串 ("") 和 undefined
false ?  3 : 2+5
//等同於 false ? 3:5    //5
/*3-0117*/



//Class 藍圖  且 JS的Class可以任意新增方法 屬性
//Object 基於藍圖產生的物件 每個物件可以配置不同
//封裝多型繼承
/*3-0140*/


function show(){
 console.log(this);
}
show() // window  or global

var obj={}
obj.show = show;
obj.show();  //{show: ƒ}   
// this 只到誰端看如何'執行'  純function 與 物件方法不一樣
//方法是物件裡面的function  其this指向物件本身

window.show = function(){
 console.log(this);
}
等同於
function show(){
 console.log(this);
}
其實與物件方法的概念是一樣的 只是window可省略





var obj = new Object();  //constructor
var obj={}; // compatible with json
obj.name="John"
obj.gender='male'
obj.showName=function(){console.log(this.name)}
obj.showGender=function(){console.log(this.gender)}
obj.showName()
obj.showGender()

//mass production
function createPerson(name,gender){

 var obj={}; // compatible with json

 obj.name=name
 obj.gender=gender
 obj.showName=function(){console.log(this.name)}
 obj.showGender=function(){console.log(this.gender)}
 obj.showName()
 obj.showGender()

 return obj
}
var p1 = createPerson('AAA','male')
var p2 = createPerson('SSS','female')
p2.showGender()
p1.showName()


/*3-0223*/


//class, prototype
function MyOBJ(name){
  var obj = new Object();
  obj.xxx = name;
  obj.aaaBBB = function(){}
  return obj
}
var person1= MyObj('Josh');
var person2= MyObj('JoshJosh');
//產生不同物件 彼此不共用任何東西  無法知道類別
//但不等同於以下


function MyOBJ(name){
  this.xxx = name;
  this.aaaBBB = function(){}
 // return this
}
var person1=  new MyObj('Josh');
var person2=  new MyObj('JoshJosh');
//此法語內建物建概念一樣
//知道類別

//物件另外加方法基本上獨立彼此不同 但是
Array.prototype === array1._proto_
Array.prototype === array2._proto_

Array.prototype === Array._proto_
//false
Array的 prototype 是在class建立時自動產生 其包含了__proto__
function Aaa(){}
Aaa.prototype

function Foo(){}
var f1 = new Foo();
f1.__proto__.constructor === Foo
__proto__ 即其類別的prototype
大致上想成 類別>函式>物件
/*4-0030*/





