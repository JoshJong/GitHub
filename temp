/* 001 */
var str ="word" //

var str = new String("")  //object temp
var text = str.substring(3)  // has attribute temp
str=str.vlueOf()  // obj -> back to string

/* in mathmatic operation : obj *5  */
var obj = {}
obj *5    //xx
obj.valueOf = function(){return 5}
obj*5  //vv   obj's valueOf  has special role in this case
obj.toString = function(){return 7} // toString is the 2nd priority for mathematic operation
/*1-0030*/

/* every var default : undefined ;  null means someone assigned null to a var.  json only uses null */
/* type of undefined is undefined,   type of null is not null */
/* undefined == null yes,   undefined === null no */
/* ===   will check typeof  in 1st priority */
/* the purpose of null  is to identify the value was assigned by human or default */


/*truthy*/
500 = true   //false
if (500) {} else {}
Boolean(500) is true
Boolean(" ") is true
Boolean("") is false

Boolean(500) is true
!500  means not Boolean(500)  , so it is false
!!500 means Boolean(500) , so it is true
!!"" is false
!!0 is false
!!null is false
!!undefined is false
!!NaN is false
!![] is true
!!{} is true
!!Infinity is true
/* there's value inside if, it will be transformed to boolean, which means has pysical memory ref, so the result will be true */
/*minify*/

/*1-0107*/


/* arguments*/
function ff(){
  var a1=arguments[0];
  var a2=arguments[1];
  var a3=arguments[2];
  var length=arguments.length;
}


/* argument behaves like array, but  
arguments instanceof Array is false
[] instanceof Array is true */

/*array foreach */
/*
這時候就要來介紹這個高階函數的格式了， forEach 允許把三個參數傳遞進去 callback 裡頭，分別是 item(element) 、 index 、 array（先不討論）。
//medium.com/@realdennis/array-%E5%8E%9F%E5%9E%8B%E7%9A%84-foreach-%E6%9C%89%E5%A4%9A%E5%A5%BD%E7%94%A8-%E5%AD%B8%E6%9C%83%E9%AB%98%E9%9A%8E%E5%87%BD%E6%95%B8%E4%B9%8B%E5%BE%8C%E9%83%BD%E4%B8%8D%E6%83%B3%E5%AF%AB-javascript-%E4%BB%A5%E5%A4%96%E7%9A%84%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%BA%86-dc4b594a045a
*/
let oddArr = [], evenArr=[];
arr.forEach((item,index)=>{
 if(index%2===0) oddArr.push(item);
 else evenArr.push(item)
})

/*arguments to array*/
var args = new Array();
...within func...for ( i<arguments.length){ args.push(arguments[i])}...
/*so we can then use the methods of array, like sort() */
or
var args = [].slice.call(arguments);
var args = [].slice.call([3,5,6,3,1]); // using array
var args = [].slice.call({'0':1, '1':2, length:2}); //using Obj  attributes name must follow 0,1,2,3.. length is also a must


/*1-0134*/

/**/
(function(){
})();
/*simplify*/
/*force to run this function with falsy, undefinded to be turned to True*/
/*also prevent from being anonymous function  1-0158*/
!function(){
}()

(function(o,n){
      o.onerror = function(){.....}
      n.queryselector('body').addEventListener('click', function(){.....})
})(window,document);   // better for compression


/**/
function run(){
    try {
    
    } catch(e){
       console.log(e.message);
    }
}
run();

/**/
function run(){
    try {  
    } catch(e){
       console.log(e.message);
    } finally{
        /* this is a must excuted area no matter any errors before, the original purposr is to release resource*/
    }
}

function run(){
    try {  
       return('abc');
    }finally{
       return('xyz');   <- only this one being returned
    }
}

function run(){
    try {  
       return('abc');
    }finally{
        console.log('xyz');   <- print xyz, then return abc
    }
}
/* finally can be used to close DB connection  ... and so on ...*/



switch(''){
  case'':
    break;
  case'':
    break;
  default:
    console.log();
}

var n=1;
switch(n){
  case 1:
  case 2:
  case 3:
    break;
  case 4:
  case 5:
    break;
  default:
    console.log(n);
}

var a=5;
funcation aaa(a){return a<15;}
switch(true){
  case a<5:
    break;
  case a<10:
    break;
  case aaa(a):
    break;
  default:
    console.log(a);
}

switch (true){
  case true:   <- will only run this one
    break;
  case true:
    break
  default:
    console.log();  
}

/*1-0238*/

/*scope*/
var a=1;
(function(a){
    a=100; <-- doens't change outside a
    console.log(a);   <-- get a inside a  because.... (as follows)
})(a)
console.log(a); <-- 1

(function(var a){   <--  equals to this
    a=100;
    console.log(a);   
})(a)
console.log(a):



function B(){
  console.log(g);
}
function A(){
  var g=99; 
  B();
}
B();  <-- can't run
A();  <-- can't run


function A(){
  var g=99; 
  function B(){
    console.log(g);
  }
  B();
}
A();  <-- 99


/*Closure*/
var g;
function outer(){
   var a=100;
   function inner(){
      console.log(a);
   }
   g=inner;
}
outer(); <- keep the inner to live globally,
g();<- can get the variable a because of the Closure
g();<- always can get a

/*1-0301*/



var name = 'A';
var obj ={
    name:'B',
    getName: function(){
            return this.name;  
    }
};
obj.getName();  //B



var name = 'A';
var obj ={
    name:'B',
    getName: function(){
    ///////////////
        return function(){
            return this.name;
        }    
    ////////////
    }
}

obj.getName():   // function(){....}
var result = obj.getName();
result();    // A     ,  because the result was excuted outside of the obj scope  ( this  is window)


var name = 'A';
var obj ={
    name:'B',
    getName: function(){
        var that = this;
    ///////////////
        return function(){
            return that.name;
        }    
    ////////////
    }
}
var result = obj.getName();  //  intiate the getName
result();   //get the value B , because of losure


//bind
var name = 'A';
var obj ={
    name:'B',
    getName: function(){
    ///////////////
        return function(){
            return that.name;
        }    
    ////////////
    }.bind(this)
}

result(); // get value B

/*2-0014*/


var add = (function(){
    var count=0;
    return count+=1;
    
})()
add //1
add //1
add //1


var add = (function(){
    var count=0;
    return function(){
      return count+=1;
    }
    
})()
add() //1
add() //2
add() //3
/* use iife to initiate , and pass the actual fucntion to var, use clousure to keep count value */


/*how to print 5 4 3 2 1*/
for(var i=1;i<5;i++){console.log(i);} //x
for(var i=1;i<5;i++){
  setTimeout(function(){
      console.log(i);
  },i*1000)
}//x
for(var i=0;i<5;i++){
    (function(i){  //!!!
          setTimeout(function(){
      console.log(i);
  },i*1000)
    })(i)   //!!!  closure
}

for(var i=0;i<5;i++){
  setTimeout(function(i){
      console.log(i);
  },i*1000,i)   // use setTimeout , another kind of closure
}

for(var i=0;i<5;i++){
  setTimeout(function(){
      console.log(this.valueOf());
  }.bind(i),i*1000,i)  //use bind to update the 'this' obj
}

for(let i=0;i<5;i++){   // let to make i different in every { }
  setTimeout(function(){
      console.log(i);
  },i*1000)
}

/*2-0032*/


/*2-0040*/
currying
